{"version":3,"file":"react-native-media-controls.cjs.production.min.js","sources":["../../src/constants/playerStates.ts","../../src/MediaControls.style.ts","../../src/utils.ts","../../src/Controls.tsx","../../src/Slider.tsx","../../src/MediaControls.tsx","../../src/Toolbar.tsx"],"sourcesContent":["enum PLAYER_STATES {\r\n  PLAYING = 0,\r\n  PAUSED = 1,\r\n  ENDED = 2,\r\n}\r\n\r\nexport { PLAYER_STATES };\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nconst white = \"#fff\";\r\n\r\nexport default StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    bottom: 0,\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    left: 0,\r\n    paddingHorizontal: 20,\r\n    paddingVertical: 13,\r\n    position: \"absolute\",\r\n    right: 0,\r\n    top: 0,\r\n  },\r\n  controlsRow: {\r\n    alignItems: \"center\",\r\n    alignSelf: \"stretch\",\r\n    flex: 1,\r\n    justifyContent: \"space-evenly\",\r\n  },\r\n  fullScreenContainer: {\r\n    alignItems: \"center\",\r\n    alignSelf: \"stretch\",\r\n    justifyContent: \"flex-end\",\r\n    paddingLeft: 20,\r\n    marginBottom: 10,\r\n  },\r\n  playButton: {\r\n    alignItems: \"center\",\r\n    height: 50,\r\n    justifyContent: \"center\",\r\n    width: 50,\r\n  },\r\n  playIcon: {\r\n    height: 22,\r\n    resizeMode: \"contain\",\r\n    width: 22,\r\n  },\r\n  progressColumnContainer: {\r\n    flex: 1,\r\n  },\r\n  progressContainer: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"flex-end\",\r\n  },\r\n  progressSlider: {\r\n    alignSelf: \"stretch\",\r\n  },\r\n  replayIcon: {\r\n    height: 20,\r\n    resizeMode: \"stretch\",\r\n    width: 25,\r\n  },\r\n  thumb: {\r\n    backgroundColor: \"#f80e37\",\r\n    borderRadius: 50,\r\n    borderWidth: 3,\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  timeRow: {\r\n    alignSelf: \"stretch\",\r\n  },\r\n  timerLabel: {\r\n    color: white,\r\n    fontSize: 12,\r\n  },\r\n  timerLabelsContainer: {\r\n    alignSelf: \"stretch\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: -7,\r\n  },\r\n  toolbar: {\r\n    flexDirection: \"row\",\r\n    flex: 1,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  toolbarRow: {\r\n    alignItems: \"flex-start\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  track: {\r\n    borderRadius: 1,\r\n    height: 5,\r\n  },\r\n});\r\n","import { PLAYER_STATES } from \"./constants/playerStates\";\r\n\r\nexport const humanizeVideoDuration = (seconds: number) => {\r\n  const [begin, end] = seconds >= 3600 ? [11, 8] : [14, 5];\r\n  const date = new Date(0);\r\n\r\n  date.setSeconds(seconds);\r\n  return date.toISOString().substr(begin, end);\r\n};\r\n\r\nexport const noop = () => {};\r\n\r\nexport const getPlayerStateIcon = (playerState: PLAYER_STATES) => {\r\n  switch (playerState) {\r\n    case PLAYER_STATES.PAUSED:\r\n      return require(\"./assets/ic_play.png\");\r\n    case PLAYER_STATES.PLAYING:\r\n      return require(\"./assets/ic_pause.png\");\r\n    case PLAYER_STATES.ENDED:\r\n      return require(\"./assets/ic_replay.png\");\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { TouchableOpacity, View, ActivityIndicator, Image } from \"react-native\";\r\nimport styles from \"./MediaControls.style\";\r\nimport { getPlayerStateIcon } from \"./utils\";\r\nimport { Props } from \"./MediaControls\";\r\nimport { PLAYER_STATES } from \"./constants/playerStates\";\r\n\r\nconst rewindIcon = require(\"./assets/ic_rw.png\");\r\nconst fastforwardIcon = require(\"./assets/ic_ff.png\");\r\n\r\ntype ControlsProps = Pick<\r\n  Props, \r\n  | \"isLoading\" \r\n  | \"playerState\" \r\n  | \"onReplay\" \r\n  | \"duration\" \r\n  | \"progress\"\r\n  | \"onSeek\"\r\n  | \"live\"\r\n> & {\r\n  onPause: () => void;\r\n};\r\n\r\nconst Controls = (props: ControlsProps) => {\r\n  const { \r\n    isLoading, \r\n    playerState, \r\n    onReplay, \r\n    onPause,\r\n    duration,\r\n    progress,\r\n    onSeek,\r\n    live,\r\n  } = props;\r\n  const icon = getPlayerStateIcon(playerState);\r\n  const pressAction = playerState === PLAYER_STATES.ENDED ? onReplay : onPause;\r\n  const ffTenSeconds = () => {\r\n    const availableDuration = duration - progress;\r\n    if (availableDuration < 10) {\r\n      onSeek(availableDuration);\r\n    } else {\r\n      onSeek(progress + 10);\r\n    }\r\n  };\r\n  const rwTenSeconds = () => {\r\n    onSeek(progress < 10 ? progress : 10);\r\n  };\r\n\r\n  const content = isLoading ? (\r\n    <ActivityIndicator size=\"large\" color=\"#FFF\" />\r\n  ) : (\r\n    <>\r\n      {!live &&\r\n        <TouchableOpacity\r\n          style={[styles.playButton]}\r\n          onPress={rwTenSeconds}\r\n          accessibilityLabel={\"Rewind 10 seconds\"}\r\n          accessibilityHint={\"Rewinds the video 10 seconds\"}\r\n        >\r\n          <Image source={rewindIcon} style={styles.playIcon} />\r\n        </TouchableOpacity>\r\n      }\r\n      <TouchableOpacity\r\n        style={[styles.playButton]}\r\n        onPress={pressAction}\r\n        accessibilityLabel={PLAYER_STATES.PAUSED ? \"Tap to Play\" : \"Tap to Pause\"}\r\n        accessibilityHint={\"Plays and Pauses the Video\"}\r\n      >\r\n        <Image source={icon} style={styles.playIcon} />\r\n      </TouchableOpacity>\r\n      {!live &&\r\n        <TouchableOpacity\r\n          style={[styles.playButton]}\r\n          onPress={ffTenSeconds}\r\n          accessibilityLabel={\"Fast-forward 10 seconds\"}\r\n          accessibilityHint={\"Fast-forwards the video 10 seconds\"}\r\n        >\r\n          <Image source={fastforwardIcon} style={styles.playIcon} />\r\n        </TouchableOpacity>\r\n      }\r\n    </>\r\n  );\r\n\r\n  return <View style={[styles.controlsRow]}>{content}</View>;\r\n};\r\n\r\nexport { Controls };\r\n","import React from \"react\";\r\nimport { TouchableOpacity, View, Text, Image, ViewStyle } from \"react-native\";\r\nimport RNSlider from \"react-native-slider\";\r\nimport styles from \"./MediaControls.style\";\r\nimport { humanizeVideoDuration } from \"./utils\";\r\nimport { Props as MediaControlsProps } from \"./MediaControls\";\r\nimport { PLAYER_STATES } from \"./constants/playerStates\";\r\n\r\nexport type CustomSliderStyle = {\r\n  containerStyle: ViewStyle;\r\n  trackStyle: ViewStyle;\r\n  thumbStyle: ViewStyle;\r\n};\r\n\r\ntype Props = Pick<\r\n  MediaControlsProps,\r\n  | \"progress\"\r\n  | \"duration\"\r\n  | \"mainColor\"\r\n  | \"onFullScreen\"\r\n  | \"playerState\"\r\n  | \"onSeek\"\r\n  | \"onSeeking\"\r\n  | \"live\"\r\n> & {\r\n  onPause: () => void;\r\n  customSliderStyle?: CustomSliderStyle;\r\n};\r\n\r\nconst fullScreenImage = require(\"./assets/ic_fullscreen.png\");\r\n\r\nconst Slider = (props: Props) => {\r\n  const {\r\n    customSliderStyle,\r\n    duration,\r\n    mainColor,\r\n    onFullScreen,\r\n    onPause,\r\n    progress,\r\n    live,\r\n  } = props;\r\n\r\n  const containerStyle = customSliderStyle?.containerStyle || {};\r\n  const customTrackStyle = customSliderStyle?.trackStyle || {};\r\n  const customThumbStyle = customSliderStyle?.thumbStyle || {};\r\n\r\n  const dragging = (value: number) => {\r\n    const { onSeeking, playerState } = props;\r\n    onSeeking(value);\r\n\r\n    if (playerState === PLAYER_STATES.PAUSED) {\r\n      return;\r\n    }\r\n\r\n    onPause();\r\n  };\r\n\r\n  const seekVideo = (value: number) => {\r\n    props.onSeek(value);\r\n    onPause();\r\n  };\r\n\r\n  console.log('duration', duration, humanizeVideoDuration(duration));\r\n  console.log('progress', progress, humanizeVideoDuration(progress))\r\n\r\n  return (\r\n    <View\r\n      style={[styles.controlsRow, styles.progressContainer, containerStyle]}\r\n    >\r\n      <View style={styles.progressColumnContainer}>\r\n        <View style={[styles.timerLabelsContainer]}>\r\n          <Text style={styles.timerLabel}>\r\n            {humanizeVideoDuration(progress)}\r\n          </Text>\r\n          <Text style={styles.timerLabel}>\r\n            {!live ? humanizeVideoDuration(duration) : 'Live'}\r\n          </Text>\r\n        </View>\r\n        <RNSlider\r\n          style={[styles.progressSlider]}\r\n          onValueChange={dragging}\r\n          onSlidingComplete={seekVideo}\r\n          maximumValue={Math.floor(duration)}\r\n          value={Math.floor(progress)}\r\n          trackStyle={[styles.track, customTrackStyle]}\r\n          thumbStyle={[\r\n            styles.thumb,\r\n            customThumbStyle,\r\n            { borderColor: mainColor },\r\n          ]}\r\n          minimumTrackTintColor={mainColor}\r\n        />\r\n      </View>\r\n      {Boolean(onFullScreen) && (\r\n        <TouchableOpacity\r\n          style={styles.fullScreenContainer}\r\n          onPress={onFullScreen}\r\n        >\r\n          <Image source={fullScreenImage} />\r\n        </TouchableOpacity>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport { Slider };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  Animated,\r\n  TouchableWithoutFeedback,\r\n  GestureResponderEvent,\r\n  ViewStyle,\r\n} from \"react-native\";\r\nimport styles from \"./MediaControls.style\";\r\nimport { PLAYER_STATES } from \"./constants/playerStates\";\r\nimport { Controls } from \"./Controls\";\r\nimport { Slider, CustomSliderStyle } from \"./Slider\";\r\nimport { Toolbar } from \"./Toolbar\";\r\n\r\nexport type Props = {\r\n  children: React.ReactNode;\r\n  containerStyle: ViewStyle;\r\n  duration: number;\r\n  fadeOutDelay?: number;\r\n  isFullScreen: boolean;\r\n  isLoading: boolean;\r\n  mainColor: string;\r\n  onFullScreen?: (event: GestureResponderEvent) => void;\r\n  onPaused: (playerState: PLAYER_STATES) => void;\r\n  onReplay: () => void;\r\n  onSeek: (value: number) => void;\r\n  onSeeking: (value: number) => void;\r\n  playerState: PLAYER_STATES;\r\n  progress: number;\r\n  showOnStart?: boolean;\r\n  sliderStyle: CustomSliderStyle;\r\n  toolbarStyle: ViewStyle;\r\n  live?: boolean;\r\n};\r\n\r\nconst MediaControls = (props: Props) => {\r\n  const {\r\n    children,\r\n    containerStyle: customContainerStyle = {},\r\n    duration,\r\n    fadeOutDelay = 5000,\r\n    isLoading = false,\r\n    mainColor = \"rgba(12, 83, 175, 0.9)\",\r\n    onFullScreen,\r\n    onReplay: onReplayCallback,\r\n    onSeek,\r\n    onSeeking,\r\n    playerState,\r\n    progress,\r\n    showOnStart = true,\r\n    sliderStyle, // defaults are applied in Slider.tsx\r\n    toolbarStyle: customToolbarStyle = {},\r\n    live = false,\r\n  } = props;\r\n  const { initialOpacity, initialIsVisible } = (() => {\r\n    if (showOnStart) {\r\n      return {\r\n        initialOpacity: 1,\r\n        initialIsVisible: true,\r\n      };\r\n    }\r\n\r\n    return {\r\n      initialOpacity: 0,\r\n      initialIsVisible: false,\r\n    };\r\n  })();\r\n\r\n  const [opacity] = useState(new Animated.Value(initialOpacity));\r\n  const [isVisible, setIsVisible] = useState(initialIsVisible);\r\n\r\n  const fadeOutControls = (delay = 0) => {\r\n    Animated.timing(opacity, {\r\n      toValue: 0,\r\n      duration: 300,\r\n      delay,\r\n      useNativeDriver: false,\r\n    }).start(result => {\r\n      /* I noticed that the callback is called twice, when it is invoked and when it completely finished\r\n      This prevents some flickering */\r\n      if (result.finished) {\r\n        setIsVisible(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      fadeOutControls(fadeOutDelay);\r\n    }\r\n  }, [isLoading]);\r\n\r\n  const fadeInControls = (loop = true) => {\r\n    setIsVisible(true);\r\n    Animated.timing(opacity, {\r\n      toValue: 1,\r\n      duration: 300,\r\n      delay: 0,\r\n      useNativeDriver: false,\r\n    }).start(() => {\r\n      if (loop) {\r\n        fadeOutControls(fadeOutDelay);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onReplay = () => {\r\n    fadeOutControls(fadeOutDelay);\r\n    onReplayCallback();\r\n  };\r\n\r\n  const cancelAnimation = () => opacity.stopAnimation(() => setIsVisible(true));\r\n\r\n  const onPause = () => {\r\n    const { playerState, onPaused } = props;\r\n    const { PLAYING, PAUSED, ENDED } = PLAYER_STATES;\r\n    switch (playerState) {\r\n      case PLAYING: {\r\n        cancelAnimation();\r\n        break;\r\n      }\r\n      case PAUSED: {\r\n        fadeOutControls(fadeOutDelay);\r\n        break;\r\n      }\r\n      case ENDED:\r\n        break;\r\n    }\r\n\r\n    const newPlayerState = playerState === PLAYING ? PAUSED : PLAYING;\r\n    return onPaused(newPlayerState);\r\n  };\r\n\r\n  const toggleControls = () => {\r\n    // value is the last value of the animation when stop animation was called.\r\n    // As this is an opacity effect, I (Charlie) used the value (0 or 1) as a boolean\r\n    opacity.stopAnimation((value: number) => {\r\n      setIsVisible(!!value);\r\n      return value ? fadeOutControls() : fadeInControls();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <TouchableWithoutFeedback accessible={false} onPress={toggleControls}>\r\n      <Animated.View style={[styles.container, { opacity }]}>\r\n        {isVisible && (\r\n          <View style={[styles.container, customContainerStyle]}>\r\n            <View\r\n              style={[\r\n                styles.controlsRow,\r\n                styles.toolbarRow,\r\n                customToolbarStyle,\r\n              ]}\r\n            >\r\n              {children}\r\n            </View>\r\n            <Controls\r\n              onPause={onPause}\r\n              onReplay={onReplay}\r\n              isLoading={isLoading}\r\n              playerState={playerState}\r\n              progress={progress}\r\n              duration={duration}\r\n              live={live}\r\n              onSeek={onSeek}\r\n            />\r\n            <Slider\r\n              progress={progress}\r\n              duration={duration}\r\n              mainColor={mainColor}\r\n              onFullScreen={onFullScreen}\r\n              playerState={playerState}\r\n              onSeek={onSeek}\r\n              onSeeking={onSeeking}\r\n              onPause={onPause}\r\n              customSliderStyle={sliderStyle}\r\n              live={live}\r\n            />\r\n          </View>\r\n        )}\r\n      </Animated.View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n};\r\n\r\nMediaControls.Toolbar = Toolbar;\r\n\r\nexport default MediaControls;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst Toolbar = ({ children }: Props) => <>{children}</>;\r\n\r\nexport { Toolbar };\r\n"],"names":["PLAYER_STATES","StyleSheet","create","container","alignItems","bottom","flex","flexDirection","justifyContent","left","paddingHorizontal","paddingVertical","position","right","top","controlsRow","alignSelf","fullScreenContainer","paddingLeft","marginBottom","playButton","height","width","playIcon","resizeMode","progressColumnContainer","progressContainer","progressSlider","replayIcon","thumb","backgroundColor","borderRadius","borderWidth","timeRow","timerLabel","color","fontSize","timerLabelsContainer","toolbar","toolbarRow","track","humanizeVideoDuration","seconds","begin","end","date","Date","setSeconds","toISOString","substr","rewindIcon","require","fastforwardIcon","Controls","props","isLoading","playerState","onReplay","onPause","duration","progress","onSeek","live","icon","PAUSED","PLAYING","ENDED","getPlayerStateIcon","pressAction","content","React","ActivityIndicator","size","TouchableOpacity","style","styles","onPress","accessibilityLabel","accessibilityHint","Image","source","availableDuration","View","fullScreenImage","Slider","customSliderStyle","mainColor","onFullScreen","containerStyle","customTrackStyle","trackStyle","customThumbStyle","thumbStyle","console","log","Text","RNSlider","onValueChange","value","onSeeking","onSlidingComplete","maximumValue","Math","floor","borderColor","minimumTrackTintColor","Boolean","MediaControls","children","customContainerStyle","fadeOutDelay","onReplayCallback","showOnStart","sliderStyle","toolbarStyle","customToolbarStyle","initialOpacity","initialIsVisible","opacity","useState","Animated","Value","isVisible","setIsVisible","fadeOutControls","delay","timing","toValue","useNativeDriver","start","result","finished","useEffect","onPaused","stopAnimation","TouchableWithoutFeedback","accessible","loop","Toolbar"],"mappings":"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"}